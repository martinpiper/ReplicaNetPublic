/* START_LICENSE_HEADER

Copyright (C) 2000 Martin Piper, original design and program code
Copyright (C) 2001 Replica Software

This program file is copyright (C) Replica Software and can only be used under license.
For more information visit: http://www.replicanet.com/
Or email: info@replicanet.com

END_LICENSE_HEADER */
#include "RNPlatform/Inc/MemoryTracking.h"
#ifndef _CODECLIENT_H_
#define _CODECLIENT_H_
#include "RNPlatform/Inc/Encryption.h"
#include "RNPlatform/Inc/ThreadClass.h"
#include "RNPlatform/Inc/Thread.h"
#include "RNXPSockets/Inc/XPSockets.h"
#include "RNLobby/Inc/CodeServer.h"
#include "RNPlatform/Inc/SysTime.h"

namespace RNReplicaNet
{

namespace RNLobby
{

/// This code client queries for the validity of codes with the RNLobby::CodeServer.
class CodeClient : private ThreadClass , private Thread
{
public:
	CodeClient();
	virtual ~CodeClient();

	/// Starts a code query. This query is asynchronous and can be stopped by using Stop().
	/// If a code is requested for the same key within the CodeServer timeout period without supplying valid nonce values the key query will result in kReply_KeyInUse.
	/// If these values are used for future CodeClient::Start() calls with the same code value then the result will be a successful key query.
	/// \param code The code to query with the server. This buffer must be a null terminated string. The buffer contents is copied by a pending query so it can be deallocated after using this call.
	/// \param nOnce1 The first nonce.
	/// \param nOnce2 The second nonce.
	/// \return Success returns true, failure returns false.
	bool Start(const char *code,const int nOnce1 = 0,const int nOnce2 = 0);

	/// Stops the current code query thread.
	/// \param hardware If true this stops the network hardware. The default is false.
	/// \return Success returns true, failure returns false.
	bool Stop(bool hardware = false);

	/// Tests the completion state of the last query. When the query completes the result can be retrieved by using GetReply()
	/// \return A completed query returns true, a pending query returns false.
	bool GetCompleted(void);

	/// Returns the last reply from a completed query.
	/// \return The last reply from a completed query.
	CodeServer::Reply GetReply(void);

	/// Returns the last user supplied reply value from a completed query. See CodeServer::AddCode() for more details about a user supplied reply.
	/// \return The user supplied reply.
	int GetUserSuppliedReply(void);

	/// When there is a successful reply two random integers are generated by the CodeServer.
	void GetNOnces(int &nOnce1,int &nOnce2);

	/// Sets the encryption key to be used by all queries for this client. The same key must be used with any RNLobby::CodeServer responding to queries from this client.
	/// The default encryption key is the same for RNLobby::CodeServer and RNLobby::CodeClient.
	/// \param data the data to use as a seed for the key. This can be NULL to use the default key.
	/// \param length the length of the data to use for creating the key
	void SetEncryptionKey(const void *data,const int length);

	/// Sets the address and port of the server. The default for the instance of the class is localhost and port CodeServer::kDefaultPort or the address resolved by a successful BackendClient::Start().
	/// \param address The new address and port number to use for the server
	void SetServer(const XPAddress &address);

private:

	int ThreadEntry(void);
	void CleanQuery(void);

	Encryption::Key mCryptoKey;

	volatile CodeServer::Reply mReply;
	volatile bool mGotReply;
	char *mCode;
	XPSocketUrgent *mSend;
	XPAddress mServerAddress;
	int mUserSuppliedReply;
	int mNOnce1;
	int mNOnce2;
	bool mServerAddressSet;
};

} // namespace RNLobby

} // namespace RNReplicaNet

#endif
