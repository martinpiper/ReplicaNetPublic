/* The Plane object */
object Plane
{
/* The Plane uses these types of data blocks. The Predict_Float for the position and rotation and the NData block */
/* The NData block does not have any interpolation or prediction filters attached and effectively copies the data type */
/* from one class to the class replicas */
	datablock Predict_Float;
	datablock NData;

/* The same as the Camera object, we define which member variables from the Plane class can be accessed by ReplicaNet */
	networking
	{
/* Notice that the minimum and maximum errors are quite strict for this object, this is because the object needs a */
/* good balance between network bandwidth and actual displayed accuracy on screen */
/* You can try changing the Quadratic(); to Linear(); to see the difference this makes */
/* Also try changing the error and distance values to get a feel for how smaller errors lead to high bytes/second being transmitted */
		Predict_Float mPosition.x;
		{
			SetMinError(0.5f);
			SetMinDistance(50.0f);
			SetMaxError(5.5f);
			SetMaxDistance(200.0f);
			Quadratic();
		}
		Predict_Float mPosition.y;
		{
			SetMinError(0.5f);
			SetMinDistance(50.0f);
			SetMaxError(5.5f);
			SetMaxDistance(200.0f);
			Quadratic();
		}
		Predict_Float mPosition.z;
		{
			SetMinError(0.5f);
			SetMinDistance(50.0f);
			SetMaxError(5.5f);
			SetMaxDistance(200.0f);
			Quadratic();
		}

		Predict_Float mRotation.x;
		{
			SetMinError(0.01f);
			SetMinDistance(0.1f);
			SetMaxError(0.05f);
			SetMaxDistance(50.0f);
			Quadratic();
		}
		Predict_Float mRotation.y;
		{
			SetMinError(0.01f);
			SetMinDistance(0.1f);
			SetMaxError(0.05f);
			SetMaxDistance(50.0f);
			Quadratic();
		}
		Predict_Float mRotation.z;
		{
			SetMinError(0.01f);
			SetMinDistance(0.1f);
			SetMaxError(0.05f);
			SetMaxDistance(50.0f);
			Quadratic();
		}

/* Here the NData type is used. Whenever the values changes it is transmitted to each replica */
		NData mPlayerNumber;
		{
/* This sets this particular member variable to be sent using a reliable packet */
			Reliable();
		}
		NData mPlayerColour;
		{
			Reliable();
		}
/* This variable need not be transmitted with a reliable packet as it is only an approximate that needs to be displayed on another players screen for example */
		NData mPlayerEnergy;
	}

// We want to make our objects "Certain" not "Reliable" because "Certain" packets use less bandwidth.
	Certain();
}
