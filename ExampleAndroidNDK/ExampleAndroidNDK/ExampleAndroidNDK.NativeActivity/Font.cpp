// Very simple proportional font rendering for debug purposes.
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <algorithm>
#include "Font.h"

// This data comes from an old Commodore 64 font file https://github.com/martinpiper/C64/blob/master/HelpViewer/TimesNewRoman10.cft
static unsigned char sFontData[1317] = {
	0x5E, 0xD7, 0x01, 0x09, 0x09, 0x01, 0xE9, 0x01, 0x07, 0x09, 0x01, 0xF2, 0x01, 0x07, 0x09, 0x01, 
	0xFB, 0x01, 0x08, 0x09, 0x01, 0x04, 0x02, 0x07, 0x09, 0x01, 0x0D, 0x02, 0x06, 0x09, 0x01, 0x16, 
	0x02, 0x08, 0x09, 0x01, 0x1F, 0x02, 0x08, 0x09, 0x01, 0x28, 0x02, 0x03, 0x09, 0x01, 0x31, 0x02, 
	0x04, 0x09, 0x01, 0x3A, 0x02, 0x09, 0x09, 0x01, 0x4C, 0x02, 0x07, 0x09, 0x01, 0x55, 0x02, 0x0B, 
	0x09, 0x01, 0x67, 0x02, 0x08, 0x09, 0x01, 0x70, 0x02, 0x08, 0x09, 0x01, 0x79, 0x02, 0x06, 0x09, 
	0x01, 0x82, 0x02, 0x08, 0x0B, 0x01, 0x8D, 0x02, 0x08, 0x09, 0x01, 0x96, 0x02, 0x06, 0x09, 0x01, 
	0x9F, 0x02, 0x07, 0x09, 0x01, 0xA8, 0x02, 0x08, 0x09, 0x01, 0xB1, 0x02, 0x07, 0x09, 0x01, 0xBA, 
	0x02, 0x0D, 0x09, 0x01, 0xCC, 0x02, 0x09, 0x09, 0x01, 0xDE, 0x02, 0x08, 0x09, 0x01, 0xE7, 0x02, 
	0x07, 0x09, 0x01, 0xF0, 0x02, 0x05, 0x06, 0x04, 0xF6, 0x02, 0x06, 0x09, 0x01, 0xFF, 0x02, 0x04, 
	0x06, 0x04, 0x05, 0x03, 0x06, 0x09, 0x01, 0x0E, 0x03, 0x04, 0x06, 0x04, 0x14, 0x03, 0x05, 0x09, 
	0x01, 0x1D, 0x03, 0x06, 0x09, 0x04, 0x26, 0x03, 0x07, 0x09, 0x01, 0x2F, 0x03, 0x03, 0x09, 0x01, 
	0x38, 0x03, 0x03, 0x0C, 0x01, 0x44, 0x03, 0x06, 0x09, 0x01, 0x4D, 0x03, 0x03, 0x09, 0x01, 0x56, 
	0x03, 0x09, 0x06, 0x04, 0x62, 0x03, 0x07, 0x06, 0x04, 0x68, 0x03, 0x05, 0x06, 0x04, 0x6E, 0x03, 
	0x06, 0x09, 0x04, 0x77, 0x03, 0x06, 0x09, 0x04, 0x80, 0x03, 0x04, 0x06, 0x04, 0x86, 0x03, 0x04, 
	0x06, 0x04, 0x8C, 0x03, 0x04, 0x08, 0x02, 0x94, 0x03, 0x07, 0x06, 0x04, 0x9A, 0x03, 0x07, 0x06, 
	0x04, 0xA0, 0x03, 0x09, 0x06, 0x04, 0xAC, 0x03, 0x05, 0x06, 0x04, 0xB2, 0x03, 0x07, 0x09, 0x04, 
	0xBB, 0x03, 0x05, 0x06, 0x04, 0xC1, 0x03, 0x05, 0x09, 0x01, 0xCA, 0x03, 0x03, 0x09, 0x01, 0xD3, 
	0x03, 0x05, 0x09, 0x01, 0xDC, 0x03, 0x05, 0x09, 0x01, 0xE5, 0x03, 0x06, 0x09, 0x01, 0xEE, 0x03, 
	0x05, 0x09, 0x01, 0xF7, 0x03, 0x05, 0x09, 0x01, 0x00, 0x04, 0x05, 0x09, 0x01, 0x09, 0x04, 0x05, 
	0x09, 0x01, 0x12, 0x04, 0x05, 0x09, 0x01, 0x1B, 0x04, 0x06, 0x02, 0x06, 0x1D, 0x04, 0x02, 0x02, 
	0x01, 0x1F, 0x04, 0x01, 0x09, 0x01, 0x28, 0x04, 0x0B, 0x0C, 0x01, 0x40, 0x04, 0x06, 0x09, 0x01, 
	0x49, 0x04, 0x05, 0x0B, 0x00, 0x54, 0x04, 0x0A, 0x09, 0x01, 0x66, 0x04, 0x06, 0x05, 0x01, 0x6B, 
	0x04, 0x09, 0x09, 0x01, 0x7D, 0x04, 0x05, 0x05, 0x01, 0x82, 0x04, 0x04, 0x0C, 0x01, 0x8E, 0x04, 
	0x04, 0x0C, 0x01, 0x9A, 0x04, 0x03, 0x01, 0x07, 0x9B, 0x04, 0x06, 0x03, 0x04, 0x9E, 0x04, 0x07, 
	0x01, 0x0C, 0x9F, 0x04, 0x07, 0x07, 0x02, 0xA6, 0x04, 0x03, 0x0C, 0x01, 0xB2, 0x04, 0x03, 0x0C, 
	0x01, 0xBE, 0x04, 0x04, 0x09, 0x01, 0xC7, 0x04, 0x03, 0x0C, 0x01, 0xD3, 0x04, 0x03, 0x0C, 0x01, 
	0xDF, 0x04, 0x01, 0x0C, 0x01, 0xEB, 0x04, 0x02, 0x08, 0x04, 0xF3, 0x04, 0x01, 0x04, 0x01, 0xF7, 
	0x04, 0x01, 0x06, 0x04, 0xFD, 0x04, 0x03, 0x04, 0x01, 0x01, 0x05, 0x02, 0x03, 0x09, 0x04, 0x05, 
	0x01, 0x01, 0x09, 0x05, 0x05, 0x04, 0x09, 0x01, 0x0E, 0x05, 0x06, 0x07, 0x02, 0x15, 0x05, 0x06, 
	0x07, 0x02, 0x1C, 0x05, 0x05, 0x09, 0x01, 0x08, 0x08, 0x14, 0x14, 0x22, 0x3E, 0x41, 0x41, 0xE3, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFC, 0x42, 0x42, 0x42, 0x7C, 0x42, 0x42, 
	0x42, 0xFC, 0x3A, 0x46, 0x82, 0x80, 0x80, 0x80, 0x82, 0x44, 0x38, 0xFC, 0x42, 0x41, 0x41, 0x41, 
	0x41, 0x41, 0x42, 0xFC, 0xFC, 0x44, 0x40, 0x48, 0x78, 0x48, 0x40, 0x42, 0xFC, 0xFC, 0x44, 0x40, 
	0x48, 0x78, 0x48, 0x40, 0x40, 0xE0, 0x3A, 0x46, 0x82, 0x80, 0x87, 0x82, 0x82, 0x42, 0x3C, 0xE7, 
	0x42, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x42, 0xE7, 0xE0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
	0xE0, 0x70, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xA0, 0xC0, 0xE7, 0x44, 0x48, 0x50, 0x70, 0x48, 
	0x44, 0x42, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0x40, 0x40, 0x40, 
	0x40, 0x40, 0x40, 0x42, 0xFC, 0xE0, 0x60, 0x51, 0x51, 0x51, 0x4A, 0x4A, 0x4A, 0xE4, 0xE0, 0xC0, 
	0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xE0, 0xC7, 0x42, 0x62, 0x52, 0x4A, 0x4A, 0x46, 0x42, 0xE2, 
	0x3C, 0x42, 0x81, 0x81, 0x81, 0x81, 0x81, 0x42, 0x3C, 0xF8, 0x44, 0x44, 0x44, 0x78, 0x40, 0x40, 
	0x40, 0xE0, 0x3C, 0x42, 0x81, 0x81, 0x81, 0x81, 0x81, 0x42, 0x3C, 0x08, 0x07, 0xFC, 0x42, 0x42, 
	0x42, 0x7C, 0x48, 0x44, 0x44, 0xE3, 0x74, 0x8C, 0x84, 0x60, 0x18, 0x04, 0x84, 0xC4, 0xB8, 0xFE, 
	0x92, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0xE7, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 
	0x3C, 0xEE, 0x44, 0x44, 0x44, 0x28, 0x28, 0x28, 0x10, 0x10, 0xEF, 0x42, 0x42, 0x45, 0x25, 0x29, 
	0x29, 0x10, 0x10, 0x38, 0x10, 0x10, 0x20, 0x20, 0x40, 0x40, 0x80, 0x80, 0xE7, 0x42, 0x24, 0x18, 
	0x08, 0x18, 0x24, 0x42, 0xE7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE7, 0x42, 
	0x24, 0x28, 0x28, 0x10, 0x10, 0x10, 0x38, 0x7E, 0x42, 0x04, 0x08, 0x10, 0x20, 0x40, 0x82, 0xFE, 
	0x60, 0x90, 0x70, 0x90, 0x90, 0x78, 0x40, 0xC0, 0x40, 0x58, 0x64, 0x44, 0x44, 0x44, 0x38, 0x70, 
	0x90, 0x80, 0x80, 0x90, 0x60, 0x08, 0x18, 0x08, 0x68, 0x98, 0x88, 0x88, 0x9C, 0x68, 0x60, 0x90, 
	0xF0, 0x80, 0x90, 0x60, 0x38, 0x48, 0x40, 0xF0, 0x40, 0x40, 0x40, 0x40, 0xE0, 0x7C, 0x88, 0x88, 
	0x70, 0x80, 0xF8, 0x84, 0x84, 0x78, 0x40, 0xC0, 0x40, 0x58, 0x64, 0x44, 0x44, 0x44, 0xEE, 0x40, 
	0x00, 0x00, 0x40, 0xC0, 0x40, 0x40, 0x40, 0xE0, 0x20, 0x00, 0x00, 0x20, 0x60, 0x20, 0x20, 0x20, 
	0x20, 0x20, 0x20, 0xC0, 0x40, 0xC0, 0x40, 0x4C, 0x50, 0x60, 0x50, 0x48, 0xEC, 0x40, 0xC0, 0x40, 
	0x40, 0x40, 0x40, 0x40, 0x40, 0xE0, 0x5A, 0xED, 0x49, 0x49, 0x49, 0xED, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x80, 0x58, 0xE4, 0x44, 0x44, 0x44, 0xEE, 0x70, 0x88, 0x88, 0x88, 0x88, 0x70, 0x58, 0xE4, 
	0x44, 0x44, 0x64, 0x58, 0x40, 0x40, 0xE0, 0x68, 0x98, 0x88, 0x88, 0x98, 0x68, 0x08, 0x08, 0x1C, 
	0x50, 0xE0, 0x40, 0x40, 0x40, 0xE0, 0x70, 0x90, 0xC0, 0x30, 0x90, 0xE0, 0x40, 0x40, 0xE0, 0x40, 
	0x40, 0x40, 0x50, 0x60, 0xCC, 0x44, 0x44, 0x44, 0x4E, 0x34, 0xEE, 0x44, 0x28, 0x28, 0x10, 0x10, 
	0xDD, 0x49, 0x4A, 0x5A, 0x24, 0x24, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0x50, 0x20, 0x20, 
	0x50, 0xD8, 0xEE, 0x44, 0x48, 0x28, 0x28, 0x10, 0x10, 0x20, 0xE0, 0xF8, 0x90, 0x20, 0x20, 0x48, 
	0xF8, 0x70, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x70, 0x40, 0xC0, 0x40, 0x40, 0x40, 0x40, 
	0x40, 0x40, 0xE0, 0x70, 0x88, 0x08, 0x08, 0x10, 0x10, 0x20, 0x48, 0xF8, 0x70, 0x88, 0x08, 0x10, 
	0x30, 0x08, 0x08, 0x08, 0xF0, 0x08, 0x18, 0x28, 0x28, 0x48, 0x88, 0xFC, 0x08, 0x08, 0x38, 0x20, 
	0x60, 0x10, 0x08, 0x08, 0x08, 0x10, 0xE0, 0x18, 0x20, 0x40, 0xB0, 0xC8, 0x88, 0x88, 0x88, 0x70, 
	0xF8, 0x88, 0x10, 0x10, 0x10, 0x20, 0x20, 0x20, 0x40, 0x70, 0x88, 0x88, 0x50, 0x20, 0x50, 0x88, 
	0x88, 0x70, 0x70, 0x88, 0x88, 0x88, 0x88, 0x78, 0x10, 0x20, 0xC0, 0xE4, 0x9C, 0x80, 0x40, 0x80, 
	0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x80, 0x1F, 0x20, 0x46, 0x89, 0x90, 0x90, 0x91, 0x93, 
	0x8C, 0x40, 0x20, 0x1F, 0x80, 0x40, 0xA0, 0xA0, 0xA0, 0xA0, 0x20, 0x40, 0x80, 0x20, 0x40, 0x80, 
	0x24, 0x24, 0x48, 0xFC, 0x48, 0x48, 0xFC, 0x90, 0x90, 0x20, 0x70, 0xA8, 0xA0, 0xE0, 0x30, 0x28, 
	0x28, 0xA8, 0x70, 0x20, 0x61, 0x92, 0x92, 0x94, 0x69, 0x0A, 0x12, 0x22, 0x21, 0x00, 0x00, 0x00, 
	0x00, 0x80, 0x40, 0x40, 0x40, 0x80, 0x30, 0x48, 0x48, 0x84, 0x84, 0x1C, 0x24, 0x28, 0x33, 0x61, 
	0x92, 0x8C, 0xC4, 0x7B, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x20, 0xA8, 0x70, 
	0xA8, 0x20, 0x10, 0x20, 0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x20, 0x10, 0x80, 0x40, 
	0x20, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x20, 0x40, 0x80, 0xE0, 0xFC, 0x00, 0xFC, 0xFE, 0x10, 
	0x10, 0x10, 0xFE, 0x10, 0x10, 0x10, 0xE0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
	0x80, 0xE0, 0xE0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xE0, 0x80, 0x80, 
	0x40, 0x40, 0x40, 0x20, 0x20, 0x20, 0x10, 0x20, 0x40, 0x40, 0x40, 0x40, 0x80, 0x40, 0x40, 0x40, 
	0x40, 0x40, 0x20, 0x80, 0x40, 0x40, 0x40, 0x40, 0x20, 0x40, 0x40, 0x40, 0x40, 0x40, 0x80, 0x80, 
	0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0xC0, 0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0xA0, 0xA0, 0xA0, 
	0xA0, 0xC0, 0x40, 0x80, 0x80, 0x10, 0x20, 0x20, 0x20, 0x40, 0x40, 0x40, 0x80, 0x80, 0x04, 0x18, 
	0x60, 0x80, 0x60, 0x18, 0x04, 0x80, 0x60, 0x18, 0x04, 0x18, 0x60, 0x80, 0x70, 0x88, 0x88, 0x08, 
	0x10, 0x20, 0x20, 0x00, 0x20
};

// This data comes from the first 94 bytes of an old Commodore 64 font character ordering file https://github.com/martinpiper/C64/blob/master/HelpViewer/CharacterOrdering.txt
static unsigned char sFontDataOrdering[94] = {
	0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 
	0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 
	0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 
	0x77, 0x78, 0x79, 0x7A, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x7E, 0x60, 
	0x21, 0x40, 0x23, 0x24, 0x25, 0x5E, 0x26, 0x2A, 0x28, 0x29, 0x2D, 0x3D, 0x5F, 0x2B, 0x5B, 0x5D, 
	0x5C, 0x7B, 0x7D, 0x7C, 0x3B, 0x27, 0x3A, 0x22, 0x2C, 0x2E, 0x2F, 0x3C, 0x3E, 0x3F
};

static bool sFontInit = false;
static int sFontReverseIndex[256];

static void EnsureTables(void)
{
	// Setup the internal table for the reverse lookup
	if ( !sFontInit )
	{
		sFontInit = true;
		memset( sFontReverseIndex , -1 , sizeof( sFontReverseIndex ) );
		int i;
		for ( i = 0 ; i < sizeof(sFontDataOrdering) ; i++ )
		{
			sFontReverseIndex[ sFontDataOrdering[i] ] = i;
		}
	}
}

class Glyph
{
public:
	Glyph();
	virtual ~Glyph();

	bool GetGlyph(const char theChar);
	void DrawGlyph(int xpos , int ypos , uint32_t *pixels , const int stride);

	int mWidth;
	int mHeight;
	int mYOffset;
	unsigned char *mPixelData;
};

Glyph::Glyph() : mWidth(0) , mHeight(0) , mYOffset(0) , mPixelData(0)
{
}

Glyph::~Glyph()
{
}

bool Glyph::GetGlyph(const char theChar)
{
	EnsureTables();

	int index = sFontReverseIndex[ (unsigned char)theChar ];

	if ( index < 0 )
	{
		return false;
	}

	unsigned char *theGlyph = sFontData + 1 + (index * 5);
	unsigned short offset = (unsigned short)theGlyph[0] + ( ( (unsigned short)theGlyph[1] ) << 8 );

	mWidth = (int) theGlyph[ 2 ];
	mHeight = (int) theGlyph[ 3 ];
	mYOffset = (int) theGlyph[ 4 ];
	mPixelData = sFontData + offset;

	return true;
}

void Glyph::DrawGlyph(int xpos , int ypos , uint32_t *pixels , const int stride)
{
	assert(mWidth && mHeight && mPixelData);

	uint32_t *topLeft = pixels + ( ypos * stride ) + xpos;

	unsigned char *pixelData = mPixelData;

	topLeft += mYOffset * stride;

	int x , y , xpix;
	for ( x = 0 ; x < mWidth ; x += 8 )
	{
		uint32_t *toDrawPos = topLeft + x;
		int hang = std::min(8 , mWidth - x );

		for ( y = 0 ; y < mHeight ; y++ )
		{
			unsigned char thePixelNow = *pixelData++;

			for ( xpix = 0 ; xpix < hang ; xpix++ )
			{
//				toDrawPos[xpix] = 0xfff;	// Enable this line to see the bounding rectangle of each glyph
				if ( thePixelNow & 128)
				{
					toDrawPos[xpix] = 0xffffff;
				}
				thePixelNow = thePixelNow << 1;
			}
			toDrawPos += stride;
		}

	}
}

static uint32_t *sPixels = 0;
static int sWidth = 0;
static int sHeight = 0;
static int sStride = 0;
extern "C" void FontDrawSetScreen(uint32_t *pixels , const int width , const int height , const int stride)
{
	sPixels = pixels;
	sWidth = width;
	sHeight = height;
	sStride = stride;
}

extern "C" void FontDraw(const int xpos , const int ypos , const char *theText)
{
	assert( sPixels && sWidth && sHeight && sStride && "FontDrawSetScreen needs correct values" );

	int nowX = xpos;
	int nowY = ypos;
	const char *text = theText;

	while ( *text )
	{
		Glyph glyph;
		char theChar = *text++;

		// MPi: TODO: Word wrapping, not bothering with it for now.

		bool ret = glyph.GetGlyph( theChar );
		if ( !ret )
		{
			switch(theChar)
			{
			default:
				break;
			case ' ':
				nowX += 6;
				break;
			case '\x0a':
				nowY += 12;
				nowX = xpos;
				continue;
				break;
			case '\x0d':
				continue;
				break;
			}
			continue;
		}

		if ( ( nowX + glyph.mWidth ) >= sWidth )
		{
			nowY += 12;
			nowX = xpos;
		}

		if (ret)
		{
			glyph.DrawGlyph(nowX , nowY , sPixels , sStride);
		}

		nowX += glyph.mWidth + 1;	// Plus a small character gap tweak
	}
}
